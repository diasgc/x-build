#!/bin/bash

aptInstallBr(){
  while [ -n "$1" ];do
    echo -ne "${CD}${ind}${CT0}install $1${C0} "
    $sudo apt -qq install $1 -y >/dev/null 2>&1
    echo -e "${C0}ok ${CT1}done${C0} $(apt-cache show $1 | grep Version)"
    shift
  done
}

config_guess(){
  if [ -f "${dir_config}/meson.build" ]; then
    build_system="meson"
    cfg="meson"
  elif [ -f "${dir_config}/CMakeLists.txt" ]; then
    build_system="cmake"
    cfg="cmake"
  elif [ -n "$(ls ${dir_config}/configure.* 2>/dev/null)" ]; then
    build_system="automake"
    cfg='ac'
    if [ -f "${dir_config}/autogen.sh" ]; then
      cfg_cmd="${dir_config}/autogen.sh"
    elif [ -f "${dir_config}/bootstrap.sh" ]; then
      cfg_cmd="${dir_config}/bootstrap.sh"
    elif [ -f "${dir_config}/bootstrap" ]; then
      cfg_cmd="${dir_config}/bootstrap"
    elif [ ! -f "${dir_config}/configure" ]; then
      cfg_cmd="autoreconf -fiv ${dir_config}/bootstrap"
    else
      return 1
    fi
  else
    return 1
  fi
  return 0
}

package_showinfo(){
	$banner || return 0
	local dp=
	local vs=
	local longdesc=$(package_longdesc)
	[ -z "$(echo $longdesc | xargs 2>/dev/null)" ] && unset longdesc

	# Main Description
	[ -n "${dsc}" ] && echo -e "\n${CD}${inds}${CW}\e[1m${lib^^} - ${C0}${dsc}\e[0m"
	[ -n "${longdesc}" ] && echo -e "${CD}${longdesc}" | sed 's|\*|\u2605|g; s|\..\..|. |g' # sed 's|^|'${ind}|g'

	# log file link
	echo -e "${CD}${ind}${CD}see log at \e[4m${log_file}\e[24m${C0}"
	# Licence
	echo -ne "${CD}${ind}${CT0}Licence ${C0}$lic "

	# Build Tools
	if [ -n "${tls}" ]; then
		echo -ne "${CT0}build deps: "
		tput sc; echo -ne "${CD}$tls "; tput rc
		for t in ${tls}; do
		if [ -z $(command -v ${t}) ];then
			aptInstall ${t} || {
			echo -ne "${CR1}${t} ${C0}" && doErr "Unable to install ${t}, aborting..."
			}
			echo -ne "${CW}${t} "
		fi
		shift
		done
	fi

	# Build Deps
	[ -n "${dep}" ] && dp="${dp}${CT0}lib deps: ${C0}$dep"

	if str_contains $src "git"; then
		local vgit=$(git_version_remote $src | head -n1)
		if [ -d ${dir_src} ];then
		local vrep=$(git_version_local ${dir_src} | head -n1)
		vs="${CT0}vrs: ${C0}$vrep "
		if str_contains $vgit $vrs; then
			vs+=" updated"
		else
			vs+=" ${CT0}latest: ${CT1}${vgit}${C0}"
		fi
		else
		vs="${CT0}vrs: ${C0}${vgit}"
		fi
	fi
	echo -e " ${vs} ${C0}"
	return 0
}

package_longdesc(){
	if [ -n "${apt}" ]; then
		echo -e $(apt-cache show ${apt} 2>/dev/null | \
		grep -E "Description-..^|^ " | \
		sed $'s/\*/\u2605/g' | \
		sed '/^ *This package contains.*\./d') | fold -s -w120 | sed 's/^/'"${ind}"'/g'
	fi
	return 0
}


check_xbautopatch(){
	pushdir ${dir_root}
	local matches=( $(grep -oP "(?<=^<<').*?(?=')" $0) )
	if [ ${#matches[@]} -gt 0 ]; then
		for match in ${matches[@]}; do
			echo -ne "${CC2}${match} ${C0}"
			local block=$(awk '/^<<.'${match}'./{flag=1; next} /^'{$match}'/{flag=0} flag' $0)
			case $match in
				XB_CREATE_CMAKELISTS|CMakeLists.txt)
					echo "${block}" >${dir_src}/CMakeLists.txt
					echo -e "\ncreate CMakeLists.txt: \n$block" >>${log_file}
					;;
				XB_PATCH) pushdir ${dir_src}
					patch -p0 <<<$(echo "${block}") 2>&1 >${log_file}
					echo -e "\npatch found: \n$block" >>${log_file}
					popdir
					;;
				XB64_PATCH) pushdir ${dir_src}
					patch -p0 <<<$(echo "${block}" | base64 -d) 2>&1 >${log_file}
					popdir
					;;
				LZS_PATCH) pushdir ${dir_src}
					patch -p0 <<<$(echo "${block}" | ${dir_root}/utils/lz-string -d -) 2>&1 >${log_file}
					popdir
					;;
				*) echo -e "\nUnknown block name ${match} with this contents (ignoring):\n$block" >>${log_file}
					;;
			esac
		done
	fi
	popdir
	return 0
}