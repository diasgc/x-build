#!/bin/bash

apt_install(){
	while [ "$1" != "" ];do
		#echo -ne "  ${CT0}install $1${C0}"
		#echo -n " "
		stty size | {
		read y x
		echo -ne "${CY1}"
		tput sc
		tput cup "$((y - 1))" 0
		$sudo apt -qq install $1 -y >/dev/null 2>&1
		echo -ne "${C0}"
		tput rc
		}
		#echo -ne "${C0} ok"
		shift
	done
}

# unused
aptInstallBr(){
  while [ -n "$1" ];do
    echo -ne "${CD}${ind}${CT0}install $1${C0} "
    $sudo apt -qq install $1 -y >/dev/null 2>&1
    echo -e "${C0}ok ${CT1}done${C0} $(apt-cache show $1 | grep Version)"
    shift
  done
}

config_guess(){
  if [ -f "${dir_config}/meson.build" ]; then
    build_system="meson"
    cfg="meson"
  elif [ -f "${dir_config}/CMakeLists.txt" ]; then
    build_system="cmake"
    cfg="cmake"
  elif [ -n "$(ls ${dir_config}/configure.* 2>/dev/null)" ]; then
    build_system="automake"
    cfg='ac'
    if [ -f "${dir_config}/autogen.sh" ]; then
      cfg_cmd="${dir_config}/autogen.sh"
    elif [ -f "${dir_config}/bootstrap.sh" ]; then
      cfg_cmd="${dir_config}/bootstrap.sh"
    elif [ -f "${dir_config}/bootstrap" ]; then
      cfg_cmd="${dir_config}/bootstrap"
    elif [ ! -f "${dir_config}/configure" ]; then
      cfg_cmd="autoreconf -fiv ${dir_config}/bootstrap"
    else
      return 1
    fi
  else
    return 1
  fi
  return 0
}

# usage create_pkgconfig_file <pkg>.pc [llibds][INSTALL_DIR]
create_pkgconfig_file(){
	[ -z "${1}" ] && pc_file=${lib} || pc_file=${1}
	[ -z "${2}" ] && pc_llib="-l${pc_file}" || pc_llib=${2}
	[ -z "${3}" ] && pc_prefix=${dir_install} || pc_prefix=${3}
	[ "${pc_llib}" == "null" ] && pc_llib=''
	[ -z "$pc_libdir" ] && pc_libdir="/lib"
	[ -z "$pc_incdir" ] && pc_incdir="/include"
	[ -z "$pc_cflags" ] && pc_cflags="-I\${includedir}"
	[ -z "$pc_libs" ] && pc_libs="-L\${libdir}"
	[ -z "$pc_url" ] && pc_url=$(dirname $src)
	fn_defined 'get_version' && get_version && pc_vrs=$vrs
	[ -z "$pc_vrs" ] && {
	[ -d "${dir_src}/.git" ] && pc_vrs=$(git_getversion ${dir_src}) || pc_vrs=$vrs
	}
	cat <<-EOF >${dir_install_pc}/${pc_file}.pc
		prefix=${pc_prefix}
		exec_prefix=\${prefix}
		libdir=\${exec_prefix}${pc_libdir}
		includedir=\${prefix}${pc_incdir}

		Name: ${lib}
		Description: ${dsc}
		URL: ${pc_url}
		Version: ${pc_vrs}
		Requires: ${pc_requires}
		Requires.private: ${pc_requiresprivate}
		Libs: ${pc_libs} ${pc_llib}
		Libs.private: ${pc_libsprivate}
		Cflags: ${pc_cflags}

		EOF
	pc_filelist="${pc_file}.pc ${pc_filelist}"
	unset pc_libdir pc_incdir pc_cflags pc_libs pc_url
}

build_packages_getdistdir(){
	[ -f "${dir_install_pc}/${pkg}.pc" ] && vrs=$(pkg-config ${dir_install_pc}/${pkg}.pc --modversion)
	[ -z "$vrs" ] && set_git_version
	echo "${dir_root}/packages/${lib}_${vrs}_${arch}"
}

build_packages_filelist(){
	local scfile="${dir_root}/${lib}.sh"
	if [ -z "$(cat $scfile | grep '# Filelist')" ]; then
		echo -e "\n\n# Filelist\n# --------" >> $scfile
		find ./ -type f | sed 's|^./|# |g' >> $scfile
	fi
}


build_packages_bin(){
	set -x
	local xb_distdir=$(build_packages_getdistdir)
	if fn_defined 'create_package'; then
		fn_log 'pack' create_package ${xb_distdir}
	else
		if fn_defined 'build_make_package'; then
			fn_log 'pack' build_make_package ${xb_distdir}
		elif [ "$MAKE_EXECUTABLE" = "ninja" ];then
			DESTDIR=${xb_distdir} ninja -C ${dir_build} install
		else
			[ -z "$mkd" ] && mkd="DESTDIR=${xb_distdir} install"
			${MAKE_EXECUTABLE} $mkd
			fi
			[ -z "$mkd_suffix" ] && mkd_suffix=${dir_install}
			pushdir "${xb_distdir}${mkd_suffix}"

			# dont forget licence files
			if [ -n "${lst_lic}" ]; then
			[ -d "share/doc/${lib}" ] || mkdir -p "share/doc/${lib}"
			for f in ${lst_lic}; do
				[ -f "share/doc/${lib}/$f" ] || cp ${dir_src}/${f} "share/doc/${lib}/"
			done
		fi
		
		# also include .pc manually-built file
		if fn_defined 'build_pkgconfig_file' || [ -n "$pc_llib" ]; then
			local xb_pkgd=$(pwd)/lib/pkgconfig
			[ ! -d "${xb_pkgd}" ] && mkdir -p $xb_pkgd
			if [ -n "${pc_filelist}" ]; then
				for pp in ${pc_filelist}; do
					cp ${dir_install_pc}/${pp} ${xb_pkgd}/
				done
			else
				cp ${dir_install_pc}/${pkg}.pc ${xb_pkgd}/
			fi
			fn_undef build_pkgconfig_file
		fi

		if fn_defined 'on_editpack'; then
			fn_log 'edit' on_editpack
		fi

		build_packages_filelist
		case $pkg_fmt in
			tgz) tar -czvf "${xb_distdir}.tar.gz" *;;
			tbz) tar -cvjSf "${xb_distdir}.tar.bz2" *;;
			zip) zip -r "${xb_distdir}.zip" *;;
		esac
		rm -rf ${xb_distdir}
		popdir
	fi
	set +x
}

#usage xbuild --new <github_url>
generate_script(){
	#set -x
	test -z "$1" && return 0
	local giturl=$1
	local srcname=${giturl/\.git/}
	local libname="${srcname##*/}"
	libname="${libname,,}"
	case ${libname} in *.git) libname=${libname/\.git/};; esac
	local scriptname="${dir_root}/${libname}.sh"
	cp "${dir_root}/utils/script.template" ${scriptname}
	chmod +x "${scriptname}"
	sed -i 's,@src@,'${giturl}',g;s,@lib@,'${libname}',g' ${scriptname}
	case $giturl in
		*github*)
			local json=$(github_json $srcname)
			local libdesc=$(cat ${json} | jq .description | xargs)
			local lic=$(cat ${json} | jq .license.name | xargs)
			test -n "${libdesc}" && libdesc=${libdesc%%\. *} && sed -i 's/@desc@/'"${libdesc}"'/g' ${scriptname}
			test -n "${lic}" && sed -i 's/@lic@/'"${lic}"'/g' ${scriptname};;
	esac
	#set +x
}

# usage github_latest_release <user/repo>
github_latest_release(){
	echo $(curl --silent "https://api.github.com/repos/$1/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
}

github_latest_tgz(){
	echo "https://github.com/intel/libvpl/archive/refs/tags/v2.10.1.tar.gz://github.com/intel/libvpl.git"

}

github_repo_id(){
	local paths=( ${1//\// } )
	paths[3]=${paths[3]/\.git/}
	echo "${paths[2]}/${paths[3]}"
}

github_json(){
	local paths=( ${1//\// } )
	local url=
	case ${paths[1]} in 
		github.com) url="https://api.github.com/repos/${paths[2]}/${paths[3]}";;
		*) echo;;
	esac
	local json=${dir_root}/builds/${libname}.info
	wget -q $url -O ${json}
	echo ${json}
}

github_description(){
	local paths=( ${1//\// } )
	local url=
	case ${paths[1]} in 
		github.com) url="https://api.github.com/repos/${paths[2]}/${paths[3]}";;
		*) return 0
	esac
	local json=${dir_root}/builds/${libname}.info
	test -f ${json} || wget -q $url -O ${json}
	 echo $(cat ${json} | jq .description | xargs)
}

package_showinfo(){
	$banner || return 0
	local dp=
	local vs=
	local longdesc=$(package_longdesc)
	[ -z "$(echo $longdesc | xargs 2>/dev/null)" ] && unset longdesc

	# Main Description
	[ -n "${dsc}" ] && echo -e "\n${CD}${inds}${CW}\e[1m${lib^^} - ${C0}${dsc}\e[0m"
	[ -n "${longdesc}" ] && echo -e "${CD}${longdesc}" | sed 's|\*|\u2605|g; s|\..\..|. |g' # sed 's|^|'${ind}|g'

	# log file link
	echo -e "${CD}${ind}${CD}see log at \e[4m${log_file}\e[24m${C0}"
	# Licence
	echo -ne "${CD}${ind}${CT0}Licence ${C0}$lic "

	# Build Tools
	if [ -n "${tls}" ]; then
		echo -ne "${CT0}build deps: "
		tput sc; echo -ne "${CD}$tls "; tput rc
		for t in ${tls}; do
		if [ -z $(command -v ${t}) ];then
			apt_install ${t} || {
			echo -ne "${CR1}${t} ${C0}" && doErr "Unable to install ${t}, aborting..."
			}
			echo -ne "${CW}${t} "
		fi
		shift
		done
	fi

	# Build Deps
	[ -n "${dep}" ] && dp="${dp}${CT0}lib deps: ${C0}$dep"

	if str_contains $src "git"; then
		local vgit=$(git_version_remote $src | head -n1)
		if [ -d ${dir_src} ];then
		local vrep=$(git_version_local ${dir_src} | head -n1)
		vs="${CT0}vrs: ${C0}$vrep "
		if str_contains $vgit $vrs; then
			vs+=" updated"
		else
			vs+=" ${CT0}latest: ${CT1}${vgit}${C0}"
		fi
		else
		vs="${CT0}vrs: ${C0}${vgit}"
		fi
	fi
	echo -e " ${vs} ${C0}"
	return 0
}

package_longdesc(){
	if [ -n "${apt}" ]; then
		echo -e $(apt-cache show ${apt} 2>/dev/null | \
		grep -E "Description-..^|^ " | \
		sed $'s/\*/\u2605/g' | \
		sed '/^ *This package contains.*\./d') | fold -s -w120 | sed 's/^/'"${ind}"'/g'
	fi
	return 0
}

patch_check_patchdir(){
  test $patch_skip && return 0
  local patch_list=( $(ls -1 ${dir_patches}/${lib}*.patch 2>/dev/null) )
  if [ -n "${patch_list[@]}" ]; then
    pushd ${dir_src} 2>&1 >/dev/null
    for p in ${patch_list[@]}; do
      patch -p0 <${p} 2>&1 >${log_file}
    done
    popd 2>&1 >/dev/null
  fi
  return 0
}

patch_check_xbpatch(){
	pushdir ${dir_root}
	local matches=( $(grep -oP "(?<=^<<').*?(?=')" $0) )
	if [ ${#matches[@]} -gt 0 ]; then
		for match in ${matches[@]}; do
			echo -ne "${CC2}${match} ${C0}"
			local block=$(awk '/^<<.'${match}'./{flag=1; next} /^'{$match}'/{flag=0} flag' $0)
			case $match in
				XB_CREATE_CMAKELISTS|CMakeLists.txt)
					echo "${block}" >${dir_src}/CMakeLists.txt
					echo -e "\ncreate CMakeLists.txt: \n$block" >>${log_file}
					;;
				XB_PATCH) pushdir ${dir_src}
					patch -p0 <<<$(echo "${block}") 2>&1 >${log_file}
					echo -e "\npatch found: \n$block" >>${log_file}
					popdir
					;;
				XB64_PATCH) pushdir ${dir_src}
					patch -p0 <<<$(echo "${block}" | base64 -d) 2>&1 >${log_file}
					popdir
					;;
				LZS_PATCH) pushdir ${dir_src}
					patch -p0 <<<$(echo "${block}" | ${dir_root}/utils/lz-string -d -) 2>&1 >${log_file}
					popdir
					;;
				*) echo -e "\nUnknown block name ${match} with this contents (ignoring):\n$block" >>${log_file}
					;;
			esac
		done
	fi
	popdir
	return 0
}

request_cmd(){
	local c1=$1
	local c2=$2
	test -z "${c2}" && c2=${c1}
	test -z $(command -v ${c1}) && apt_install ${c2}
	return 0
}

utils_get_latest_release(){
	if fn_defined 'latest_release'; then
		echo $(latest_release)
	elif [ -z "${src}" ]; then
		echo "Unknown source ${src}"
	else
		local paths=( ${src//\// } )
		paths[3]=${paths[3]/\.git/}
		case ${paths[1]} in
			github.com) github_latest_release "${paths[2]}/${paths[3]}"
				;;
			*) echo $(git ls-remote --tags --sort "v:refname" $src | tail -n1 | rev | awk -v FS='/' '{print $1}' | rev)
				;;
		esac
	fi
}


# unused

ndk_assert_h_sys_soundcard(){
	[ "$host_os" == "android" ] && \
		[ ! -f "$SYSROOT/usr/include/sys/soundcard.h" ] && \
		echo "#include <linux/soundcard.h>" >"$SYSROOT/usr/include/sys/soundcard.h" 
	return 0
}
set_ndk_api(){
	API=${1}
	loadToolchain
}
downloadP(){
	tput sc && echo -ne "\e[$(tput lines);0H${CY1}"
	# wget --progress=dot $url 2>&1 | grep --line-buffered "%" | sed -u -e "s,\.,,g" | awk '{printf("\b\b\b\b%4s", $2)}'
	wget --progress=dot $1 2>&1 | grep --line-buffered "%" | sed -u -e "s,\.,,g" | awk '{printf("\r%4s %s eta:%s  ",$2,$1,$4)}'
	tput rc
	echo "${C0} ok "
}
checkUrl(){
	wget -S --spider $1 2>&1 | grep -q "HTTP/1.[0-9] 200 OK" && echo SUCCESS || echo FAIL
}
checkCmd(){
	[ -z "$(command -v $1)"] $sudo apt -qq install $1 -y >/dev/null 2>&1
}
err_call(){
	echo -e "$(
		cat <<-EOM
			\n${CW}tcutils $vrs
			${C0}Cannot be called directly. Missing vars lib arch or src
			\n
			EOM
	)"
	exit 1  
}
prtPrc(){
	local v=$(grep "%")
}
cmakeClean(){
	pushdir $1
	rm -rf CMakeFiles CMakeCache.txt
	popdir
}
makeClean(){
	pushdir $1
	make clean
	popdir
}
setCMake(){
	printf "SET($2 $3)\n\n" >> $1
}