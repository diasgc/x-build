#!/bin/sh
# ................................................
# Commons 0.3.1-dev 2021-diasgc
# Definition constants and functions
# ................................................

vsh='0.3.1-dev'

#b="\u25ba"
b="\u2605"
c="\u2714"
# def colors
C0="\e[0m" CW="\e[97m"  CD="\e[90m" CW2="\e[38;5;234m" CW3="\e[38;5;238m" CW4="\e[38;5;242m"  CW5="\e[38;5;246m" CW6="\e[38;5;250m"
CR0="\e[31m" CR1="\e[91m" CR2="\e[38;5;52m" CR3="\e[38;5;88m" CR4="\e[38;5;124m" CR5="\e[38;5;160m"  CR6="\e[38;5;196m"
CY0="\e[33m" CY1="\e[93m" CY2="\e[38;5;58m" CY3="\e[38;5;94m" CY4="\e[38;5;136m" CY5="\e[38;5;178m"  CY6="\e[38;5;220m"
CG0="\e[32m" CG1="\e[92m" CG2="\e[38;5;40m" CG3="\e[38;5;46m" CG4="\e[38;5;82m" CG5="\e[38;5;118m"  CG6="\e[38;5;154m"
CC0="\e[36m" CC1="\e[96m" CC2="\e[38;5;49m" CC3="\e[38;5;85m" CC4="\e[38;5;122m" CC5="\e[38;5;123m"  CC6="\e[38;5;195m"
CB0="\e[34m" CB1="\e[94m" CB2="\e[38;5;26m" CB3="\e[38;5;69m" CB4="\e[38;5;111m" CB5="\e[38;5;152m"  CB6="\e[38;5;153m"
CM0="\e[35m" CM1="\e[95m" CM2="\e[38;5;54m" CM3="\e[38;5;91m" CM4="\e[38;5;126m" CM5="\e[38;5;162m"  CM6="\e[38;5;198m"

CO0="\e[38;5;130m" CO1="\e[38;5;166m" CO2="\e[38;5;202m" CO3="\e[38;5;208m"  CO4="\e[38;5;214m" CO5="\e[38;5;220m" CO6="\e[38;5;223m"
CF0="\e[38;5;53m"  CF1="\e[38;5;89m"  CF2="\e[38;5;125m" CF3="\e[38;5;161m"  CF4="\e[38;5;197m" CF5="\e[38;5;211m" CF6="\e[38;5;219m"
CL0="\e[38;5;34m" CL1="\e[38;5;72m" CL2="\e[38;5;114m" CL3="\e[38;5;120m"  CL4="\e[38;5;156m" CL5="\e[38;5;192m" CL6="\e[38;5;230m"

# theme colors
CT0=$CM0 CT1=$CM1 CS0=$CR0 CS1=$CR1 SSB=$C0

function trap_sigint {
  tput cnorm -- normal
  cd $(dirname $0)
  local l
  [ -f "${log_file}" ] && l="  Log available at ${log_file}\n"
  echo -e "\n\n${CY1}  Interrupted by user${C0}\n${l}\n"
  exit 1
}

trap trap_sigint SIGINT

# Logger
logtime_start=
export indent=0
export ind=''
export dir_root=$(pwd)

hwinfoCountCoresReadable(){
  case $(nproc) in
    "1") echo "Single-Core";;
    "2") echo "Dual-Core";;
    "4") echo "Quad-Core";;
    "6") echo "Hexa-Core";;
    "8") echo "Octa-Core";;
    *) echo "$n-Core";;
  esac
}

hwinfoProcessor(){
  local i=$(cat /proc/cpuinfo | grep -Po '^.odel.*: \K(.*)' | tail -n1)
  [ -z "$i" ] && i=$(cat /proc/cpuinfo | grep -Po '^.ardware.*: \K(.*)' | tail -n1)
  [ -z "$i" ] && i=Unknown
  echo $i
}

banner(){
    echo -ne "\n\n  ${CW}${1} for X-Builder ${vsh}${C0}\n  "
    echo -ne "Running on $(uname -m) $(uname -o) "
    [ -n $(command -v lsb_release) ] && echo -ne "$(lsb_release -sd) "
    if [ -n "$(uname -r | grep 'microsoft')" ];then
        echo -ne "${CD}WSL2 "
    elif [ -n "$(uname -r | grep 'Microsoft')" ];then
        echo -ne "${CD}WSL "
    else
        echo -ne "${CD} "
    fi
    echo -e "$(uname -r)${C0}"
    echo -e "${CW}  $(hwinfoCountCoresReadable) $(hwinfoProcessor)${C0}"
}

fn_defined(){
  [ "$(type -t $1)" = 'function' ]
}

isfn_defined(){
  [ "$(type -t $1)" = 'function' ]
}

git_getversion(){
  [ -d "${1}" ] && git --git-dir=${1}/.git --work-tree=${1} describe --abbrev=0 --tags || git describe --abbrev=0 --tags
}

str_contains(){
   [ -z "${1##*${2}*}" ]
}

str_starts(){
   [ "${1#${2}}" != "${1}" ]
}

str_ends(){
   [ "${1%${2}}" != "${1}" ]
}

str_lowercase(){
  echo ${1} | tr '[:upper:]' '[:lower:]'
}

str_uppercase(){
  echo ${1} | tr '[:lower:]' '[:upper:]'
}

defvar(){
  local k
  while [ -n "${1}" ]; do
    k=${1%=*}
    [ -z ${k+x} ] && eval $k=${1#*=}
  done
}

pushvar_f(){
  var_addl $@
}

pushvar_l(){
  var_addr $@
}

popvar_f(){
  local n=$1
  local v=( ${!1} )
  case ${#v[@]} in
    0) echo;;
    1) echo $v; eval $n=;;
    *) local p="${v%% *} "
       echo $p
       eval $n=\"${v#$p}\"
       ;;
  esac
}

popvar_l(){
  local n=$1
  local v=( ${!1} )
  case ${#v[@]} in
    0) echo;;
    1) echo $v; eval $n=;;
    *) local p="${v## *} "
       echo $p
       eval $n=\"${v%$p}\"
       ;;
  esac
}

pushdir(){
  case $SHELL in
    *bash) pushd $1 >/dev/null 2>&1;;
    *) pushvar_f shell_dstack $1; cd $1;;
  esac
}

popdir(){
  case $SHELL in
    *bash) popd >/dev/null 2>&1;;
    *) local d=$(popvar_f shell_dstack); [ -n "$d" ] && cd $d;;
  esac
}

prt_progress_old(){
  printf "%-6s"
  while read -r ln; do
    printf "\e[6D%-6s" $(grep -oP '\d+%' <<< $ln)
  done
  printf "\e[6D"
}

prt_progress(){
  printf "%-6s"
  local sln
  while read -r ln; do
    str_contains $ln 'error: ' && printf $CR1
    sln=$(grep -oP '\d+%' <<< $ln)
    [ -n "$sln" ] && printf "\e[5D%-5s" $sln
  done
  printf "\e[6D"
}

inc_tab(){
  indent=$((indent+2))
  ind=$(printf '%*s' "$indent")
}

dec_tab(){
  indent=$((indent-2))
  [ $indent -gt 0 ] && ind=$(printf '%*s' "$indent") || unset ind
}

# exclusive variable add substrings left var_xaddl <var> <substrings...>
# appends substrings to the left/start of var iff main doesnt contains substring
var_xaddl(){
  local v=$1; shift
    while [ -n "$1" ];do
        [ -z "${!v##*${1}*}" ] || eval $v=\"${1} ${!v}\"
        shift
    done
}

# exclusive variable add substrings right var_xaddl <var> <substrings...>
# appends substrings to the right/end of var variable iff main doesnt contains substring
var_xaddr(){
    local v=$1; shift
    while [ -n "$1" ];do
        [ -z "${!v##*${1}*}" ] || eval $v=\"${!v} ${1} \"
        shift
    done
}

var_addr(){
    local v=$1; shift; eval $v=\"${!v} $@\"
}

var_addl(){
    local v=$1; shift; eval $v=\"$@ ${!v}\"
}

# vercomp v1 v2 returns 0: v1=v2, 1: v1>v2, 2: v1<v2
vercomp () {
    test "$1" = "$2" && return 0
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        test -z "${ver2[i]}" && ver2[i]=0
        if ((10#${ver1[i]} > 10#${ver2[i]})); then return 1; fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then return 2; fi
    done
    return 0
}

rm_quiet(){
  rm -rf $@ 2>&1 >/dev/null
}

rm_log(){
  local log=$1; shift
  [ -f "${log}" ] && [ -n "$@" ] && rm -rf $@ 2>&1 >>${log}
}

log_progress(){
  printf "%-6s"
  local sln
  IFS=$'\n'
  while read -r ln; do
    # $has_logfile && \
    printf "%-6s: %s\n" $(time_elapsed) $ln >>${logfile}
    str_contains $ln 'error: ' && printf $CR1
    sln=$(grep -oP '\d+%' <<< $ln)
    [ -n "$sln" ] && printf "\e[5D%-5s" $sln
  done
  printf "\e[6D"
  unset IFS
}

# usage: log <logfile> [--noerr|--progress] <label> <commands....>
log(){
  local noerr=false
  local progress=false
  while $(str_starts $1 '--');do
    case $1 in
      --noerr) noerr=true;;
      --progress) progress=true;;
    esac
    shift
  done
	local label=$1; shift
	echo -ne "${CD}${label}${C0}"
	echo -e "\n$(time_elapsed): $@" >> "$logfile"
  if $progress; then
	  ("$@" |& log_progress) || err "in ${act}:\n\n...\n$(tail -n5 ${logfile}${C0})"
  else
	  "$@" 2>> "$logfile" 1>> "$logfile" || err
  fi
	echo -ne "\e[${#label}D${CT0}${label}${C0} "
}

log_init(){
  export logfile=${1}
  [ -f "${1}" ] && rm -f $logfile
  export log_timestart=$(date +%s)
}

logv(){
  while [ -n "${1}" ]; do
    echo "$1=${!1}" >>${logfile} 2>&1
    shift
  done
  echo >>${logfile}
}

log_end(){
  log_timestop=$(date +%s)
  local secs=$(($log_timestop-$log_timestart))
  local msg="${CT1} done ${CD}in $(secs2time ${secs})"
  [ $secs -gt 60 ] && msg="$msg (${secs}s)"
  #echo -e "$msg pkg/lib: ${pkgsize}/${libsize}kb${C0}"
  echo -e "$msg"
}

err(){
  if [ $# -gt 0 ];then
    echo -e "${CR1}  Error: ${CR0}${1}${C0}\n\n"
    if [ -f "${logfile}" ];then
      # todo
      #if [ -f ${BUILD_DIR}/CMakeFiles/CMakeError.log ];then
      #  echo -e "\n\n${BUILD_DIR}/CMakeFiles/CMakeError.log:\n" >> $logfile
      #  cat ${BUILD_DIR}/CMakeFiles/CMakeError.log >> $logfile
      #fi
      echo -ne "${CY1}${ind}Open log? [Y|n]:${C0}" && read openlog
      case $openlog in y*|Y*) nano ${logfile};; esac
    fi
  fi
  exit 1
}

time_elapsed(){
  if [ -n "${log_timestart}" ] && [ ${log_timestart} -gt 0 ];then
    local dt=$(($(date +%s) - ${log_timestart}))
    printf "+%-10s" $(date -u -d @${dt} +"%m:%S")
  else
    printf " --:-- "
  fi
}

# usage: git_get_version srcdir
git_local_version(){
  local out;
  if [ -d "${1}/.git" ];then
    local d=$(pwd)
    cd ${1}
    out=$(git describe --abbrev=0 --tags 2>/dev/null)
    cd ${d}
  fi
  echo $out
}

git_remote_version(){
  echo $(git ls-remote --tags --refs --sort="v:refname" ${1} 2>/dev/null | head -n1 | sed 's/.*\///')
}

git_api_tojson(){
  local s=$(echo "$1" | sed 's/https:\/\///g; s/\// /g; s/\.git$//')
  set -- $s
  case ${1} in
    github*) echo -e "$(curl https://api.github.com/repos/${2}/${3} 2>/dev/null)";;
    gitlab*) echo -e "$(curl -XGET -H "Content-Type: application/json" "https://${1}/api/v4/projects/${2}%2F${3}" 2>/dev/null)";;
    *) echo;;
  esac
}

get_latest_release() {
  local s=$(echo "$1" | sed 's/https:\/\///g; s/\// /g; s/\.git$//')
  set -- $s
  #echo -ne "$1: $2/$3"
  case $1 in
    github*) echo -e "$(curl --silent "https://api.github.com/repos/${2}/${3}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')";;
  esac                                # Pluck JSON value
}

wget_untar(){
  local args
  case $1 in
    *.tar.lz) 
      [ -z $(command -v lzip) ] || exit 1
      args="--lzip -xv"
      ;;
    *.tar.gz|*.tgz) args="-xvz";;
    *.tar.xz) args="-xvJ";;
  esac
  [ -d "tmp" ] && rm -rf tmp
  mkdir tmp
  wget -qO- $1 2>/dev/null | tar --transform 's/^dbt2-0.37.50.3/dbt2/' $args -C tmp >/dev/null 2>&1 || exit 1
  cd tmp
  mv * $2 && mv $2 ..
  cd ..
  rm -rf tmp
}

gitlab_licence(){
  local s=$(echo "$1" | sed 's/https:\/\///g; s/\// /g; s/\.git$//')
  set -- $s
  if [ "$1" == "github.com" ];then
    echo -e "$(curl https://api.github.com/repos/${2}/${3} 2>/dev/null)"
  elif [ "${1}" != "${1#gitlab}" ];then
    local json=$(curl -XGET -H "Content-Type: application/json" "https://${1}/api/v4/projects/${2}%2F${3}" 2>/dev/null)
    local id=$(echo "$json" | jq .id)
    echo ${id} "curl --request GET https://${1}/api/v4/licence/${id}"
  else
    echo
  fi
}

github_json_desc(){
  echo "${1}" | jq .description | sed 's/"//g'
}

github_jq(){
  echo "${1}" | jq "${2}" | sed 's/"//g'
}

#usage: str_concat 'sep' [arg_list]
str_concat(){
  local IFS="$1" && shift
  echo "$*"
}

#usage: arch_fromid out_arm64 out_arm out_x86 out_x64
arch_fromid(){
  local xid=$(expr "$cpu_id" % 4)
  local args=("$@")
  echo "${args[${xid}]}"
}

#usage: arch_fromid out_android out_linux out_windows
os_fromid(){
  local xid=$(expr "$cpu_id" / 4 % 3)
  local args=("$@")
  echo "${args[${xid}]}"
}

set_host(){ 
  host_id=$1
  host_cpuid=$(expr "$host_id" % 4)
  host_osid=$(expr "$host_id" / 4 % 3)
  host_cross=true
  host_arm=false; host_arm32=false; host_arm64=false; host_x86=false; host_x64=false
  host_ndk=false; host_gnu=false; host_mingw=false; host_osx=false; host_ios=false

  case $host_osid in 
    0)	host_ndk=true; host_sys=linux; host_clang=true; host_os="android"; host_sys="linux"
        PLATFORM="Android"
        : "${API:=24}"
        TOOLCHAIN="${ANDROID_NDK_HOME}/toolchains/llvm/prebuilt/linux-x86_64"
        SYSROOT="${TOOLCHAIN}/sysroot"
        LIBSDIR="$ROOTDIR/builds/android/"

        arch_list=["aarch64-linux-android","arm-linux-androideabi","i686-linux-android","x86_64-linux-android"]
        ldir_list=["arm64-v8a","armeabi-v7a","x86","x86_64"]
        load_hostfeats
        
        $host_arm && CT0=$CG2 CT1=$CG5 || CT0=$CG0 CT1=$CG1
        $host_arm32 && CC="${TOOLCHAIN}/bin/armv7a-linux-androideabi${API}-clang" || CC="${TOOLCHAIN}/bin/${arch}${API}-clang"
        CXX="${CC}++"; AS="${CC}"
        LD="${TOOLCHAIN}/bin/ld.${clang_ld}"
        GCOV="${TOOLCHAIN}/bin/llvm-cov"
        CROSS_PREFIX="${TOOLCHAIN}/bin/${arch}-"
        [ ! -f "${CROSS_PREFIX}ar" ] && CROSS_PREFIX="${TOOLCHAIN}/bin/llvm-"
        YASM="${TOOLCHAIN}/bin/yasm"
        
        i_syspath="${SYSROOT}/usr/include/${arch}"
        l_syspath="${SYSROOT}/usr/lib/${arch} ${SYSROOT}/usr/lib/${arch}/${API}"
        #LT_SYS_LIBRARY_PATH="$SYSROOT/usr/lib/$arch:$SYSROOT/usr/lib/${arch}/${API}"
        #LDFLAGS="-Wl,-rpath,${LT_SYS_LIBRARY_PATH} ${LDFLAGS}"
        #CPPFLAGS="-I${SYSROOT}/usr/include/${arch}"
        CMAKE_TOOLCHAIN="${ANDROID_NDK_HOME}/build/cmake/android.toolchain.cmake"
        ${use_ndk_cmake} && [ -d "${ANDROID_HOME}/cmake" ] && CMAKE_EXECUTABLE="${ANDROID_HOME}/cmake/3.10.2.4988404/bin/cmake"
        ;;

    1)	host_gnu=true; host_sys=linux; host_clang=false; host_os="linux"; host_sys="linux"
        PLATFORM="Linux"
        LIBSDIR="$ROOTDIR/builds/linux/"
        
        arch_list=["aarch64-linux-gnu","arm-linux-gnueabihf","i686-linux-gnu","x86_64-linux-gnu"]
        ldir_list=["aarch64","arm","x86","x86_64"]
        load_hostfeats

        $host_arm && CT0=$CY0 CT1=$CY1 || CT0=$CM0 CT1=$CM1
        local ltsdir=("$xv_aarch64_gnu" "$xv_armeabi_gnu" "$xv_x86_gnu" "$xv_x64_gnu")
        ltsdir=${ltsdir[$(expr $cpu_id % 4)]}
        if $host_cross; then
          SYSROOT="/usr/${arch}"
          TOOLCHAIN="/usr/${arch}/bin"
          CROSS_PREFIX="${arch}-"
          local cross="-cross"
        else
          unset SYSROOT TOOLCHAIN CROSS_PREFIX
        fi
        CC=${CROSS_PREFIX}gcc
        CXX=${CROSS_PREFIX}g++
        AS=${CROSS_PREFIX}as
        LD=${CROSS_PREFIX}ld

        i_syspath="${SYSROOT}/usr/include ${SYSROOT}/usr/local/include"
        l_syspath="/usr/lib/gcc${cross}/${arch}/${ltsdir}"
        
        [ -n "$ltsdir" ] && LT_SYS_LIBRARY_PATH="/usr/lib/gcc${cross}/${arch}/${ltsdir}"
        LDFLAGS="-Wl,-rpath,${LT_SYS_LIBRARY_PATH} ${LDFLAGS}"
        CPPFLAGS=" -I$SYSROOT/usr/include -I$SYSROOT/usr/local/include -I$LIBSDIR/include"
        ;;

    2)  host_mingw=true; host_os="windows"; host_sys="windows"
        PLATFORM="Windows"
        LIBSDIR="$ROOTDIR/builds/windows/"

        arch_list=["aarch64-w64-mingw32","armv7-w64-mingw32","i686-w64-mingw32","x86_64-w64-mingw32"]
        ldir_list=["aarch64","armv7","x86","x86_64"]
        load_hostfeats

        [ -z ${2} ] && host_abi="${1}" || host_abi="${2}"
        arch="${1}-w64-mingw32"
        [ "$p_id" -lt 2 ] && CT0=$CC0 CT1=$CC1 || CT0=$CB0 CT1=$CB1
        TOOLCHAIN="${LLVM_MINGW_HOME}/bin"
        SYSROOT="${LLVM_MINGW_HOME}/${arch}"
        CROSS_PREFIX="${TOOLCHAIN}/${arch}-"
        
        CC="${CROSS_PREFIX}clang"
        CXX="${CC}++"
        LD="${CROSS_PREFIX}ld"
        AS="${CROSS_PREFIX}as"
        RC="${CROSS_PREFIX}windres"

        LT_SYS_LIBRARY_PATH="${LLVM_MINGW_HOME}/lib/clang/${xv_llvm_mingw}"
        CPPFLAGS="-I$LT_SYS_LIBRARY_PATH/include"
        LDFLAGS="-L${LT_SYS_LIBRARY_PATH}/lib -L${SYSROOT}/lib"
        ;;
    3)  host_osx=true; host_os="darwin"; host_sys="darwin"
        PLATFORM="OSX"
        LIBSDIR="$ROOTDIR/builds/mac"
        # todo
        ;;

  esac

  LDFLAGS="-Wl,-rpath,$(format_pathlist ${l_syspath} '' ':') ${LDFLAGS}"
  CPPFLAGS="$(format_pathlist ${i_syspath} '-I' ' ') -I$LIBSDIR/include"
  
  AR=${CROSS_PREFIX}ar
  NM=${CROSS_PREFIX}nm
  RANLIB=${CROSS_PREFIX}ranlib
  STRIP=${CROSS_PREFIX}strip
  WINDRES=${CROSS_PREFIX}windres

  ADDR2LINE=${CROSS_PREFIX}addr2line
  OBJCOPY=${CROSS_PREFIX}objcopy
  OBJDUMP=${CROSS_PREFIX}objdump
  READELF=${CROSS_PREFIX}readelf
  SIZE=${CROSS_PREFIX}size
  STRINGS=${CROSS_PREFIX}strings
  
  [ -z ${GCOV+x} ] && GCOV=${CROSS_PREFIX}gcov

  #reset flags
  LIBSDIR="$(pwd)/builds/${host_os}/${host_abi}"
  LDFLAGS+=" -L$LIBSDIR/lib"
  
  [ "$arch" == "$build_arch" ] && host_cross=false
  
  # export
  export arch host_id host_osid host_arm host_arm32 host_arm64 host_x86 host_x64 \
    host_ndk host_gnu host_mingw host_osx host_ios \
    PLATFORM TOOLCHAIN SYSROOT CROSS_PREFIX \
    CC CXX LD AS AR NM RANLIB STRIP WINDRES YASM \
    ADDR2LINE GCOV OBJCOPY OBJDUMP READELF SIZE STRINGS \
    LT_SYS_LIBRARY_PATH CPPFLAGS LDFLAGS LIBSDIR \
    CMAKE_EXECUTABLE PKG_CONFIG API
}



load_hostfeats(){
  case $host_cpuid in
    0) arch="${arch_list[0]}"; host_arm=true; host_arm64=true; LIBSDIR+="${ldir_list[0]}";;
    1) arch="${arch_list[1]}"; host_arm=true; host_arm32=true; LIBSDIR+="${ldir_list[1]}";;
    2) arch="${arch_list[2]}"; host_x86=true; LIBSDIR+="${ldir_list[2]}";;
    3) arch="${arch_list[3]}"; host_x64=true; host_cross=false; LIBSDIR+="${ldir_list[3]}";;
  esac
}

format_pathlist(){
  local sep=$2
  local prf=$3
  local out=
  for a in $1; do
    out+="${prf}${a}${sep}"
  done
  echo "${out}"
}

# usage: wget_source <src-url> <dst-dir>
wget_source(){
    local fn=$(basename $1) || doErr "Invalid source url '$1'"
    [ -z "$2" ] && local dn=$(pwd) || local dn=$2
    case $fn in
      *.zip);;
      *.tar.lz|*.tlz) args="--lzip -xv";;
      *.tar.gz|*.tgz) args="-xvz";;
      *.tar.xz|*.txz) args="-xvJ";;
    esac
}

# usage: wget_pkg_termux <lib-name> <aarch64|arm|i686|x86_64> <dst-dir>
wget_pkg_termux(){
  [ -z "$1" ] || [ -z "$2" ] || [ ! -d "$3" ] && return 1
  echo -ne "searching for ${1}"
  local rname=$(wget -qO- http://termux.net/dists/stable/main/binary-${2}/ | grep -o ${1}_.*\.${2}\.deb\" | tail -n1)
  [ -z "${rname}" ] && echo -e " ${CR0}not found: aborting" && return 1
  rname=${rname:0:-1}
  echo -ne "${CY0}:found $rname"
  local od=$(pwd); cd ${3}
  [ -d "tmp" ] && rm -rf tmp
  mkdir -p tmp && cd tmp
  local url="http://termux.net/dists/stable/main/binary-${2}/${rname}"
  echo -ne " >download"
  wget -q $url
  [ ! -f "$rname" ] && echo -e "${CR1}:fail to download $url\n${C0}" && return 1
  echo -ne " >extract"
  ar -x $rname && tar -x -f data.tar.xz
  echo -ne " >fix paths"
  sed -i "s;/data/data/com.termux/files/usr;${3};g" data/data/com.termux/files/usr/lib/pkgconfig/*.pc 2>/dev/null
  cp -rf data/data/com.termux/files/usr/* ..
  cd .. && rm -rf tmp
  echo -e "${CG1} :done${C0}"
  cd $od
  return 0
}

#usage wget_pkg_debian [--list] <pkg-name> <filename-prefix> <arm64|armhf|armel|i386|amd64> dst-dir
wget_pkg_debian(){
  local lst=false
  local p_arch
  [ "$1" == "--list" ] && lst=true && shift
  case $3 in
    aarch64*) p_arch="arm64";;
    arm*hf)   p_arch="armhf";;
    arm*eabi) p_arch="armel";;
    i686*)    p_arch="i386";;
    x86_64*)  p_arch="amd64";;
    *) echo -e "${CR0} unknown $3${C0}"; return 1;;
  esac
  [ "${1::3}" == "lib" ] && local ldir=${1::4} || local ldir=${1::1}
  local url="http://ftp.debian.org/debian/pool/main/${ldir}/${1}/"
  echo $url
  if $lst; then
    local uris=$(curl -l ${url} 2>/dev/null | grep -o \>${2}_.*_${p_arch}.deb)
    for u in $uris; do
      echo ${url}${u:1}
    done
  else
    local od=$(pwd)
    if [ ! -d "$4" ];then
      mkdir -p $4 || return 1
    fi
    cd $4
    [ -d "tmp" ] && rm -rf tmp
    mkdir -p tmp && cd tmp
    local u=$(curl -l $url 2>/dev/null | grep -o \>${2}_.*_${p_arch}.deb | tail -n1)
    url="${url}${u:1}"
    echo $url
    wget -q $url
    ar -x $(basename ${url}) && tar -x -f data.tar.xz
    mv usr/lib/${3}/* usr/lib && rm -rf usr/lib/${3}
    sed -i "s|lib/${3}|lib|g;s|/usr|${4}|g" usr/lib/pkgconfig/*.pc 2>/dev/null
    cp -rf usr/* ..
    cd .. && rm -rf tmp
    echo -e "${CG1} :done${C0}"
    cd $od
  fi
}

list_pkgs(){
  local pd="${dir_root}/builds"
  case $1 in
    *-android*) wget -q "https://sourceforge.net/projects/packages-${1}/rss?path=/" -O - | grep -Po '<title><!\[CDATA\[.*</title>' | grep -Po '/.*tar.gz' | sed 's|/||'> ${pd}/$1_pkglist.txt;;
    *) return 1;;
  esac
}

get_link_pkg(){
  local pd="${dir_root}/builds"
  local fn=$(cat "${pd}/${1}_pkglist.txt" | grep "${2}.*${1}.tar.gz" | tail -n1)
  [ -n "${fn}" ] && echo "https://sourceforge.net/projects/packages-${1}/files/${fn}"
  return 0
}

ac_configure() {

  #[ -z "${mki+x}" ] && mki=$(make_findtarget "install-strip" "install")
  [ -z "$exec_config" ] && exec_config='configure' # default config executable
  [ -n "${ac_config}" ] && CFG=${ac_config}

  # find static build option
  if $build_static && [ -n "$(cat ${dir_config}/${exec_config} | grep '\-\-enable-static')" ]; then
    build_type="--enable-static"
  fi
  # find shared build option
  if $build_shared && [ -n "$(cat ${dir_config}/${exec_config} | grep '\-\-enable-shared')" ]; then
    build_type+=" --enable-shared"
  fi

  if [ -n "${ac_bin}" ]; then
    arr=(${ac_bin//|/ })
    case ${#arr[@]} in
      1) $build_bin && CBN="${arr[0]}=1" || CBN="${arr[0]}=0";;
      2) $build_bin && CBN="${arr[1]}" || CBN="${arr[0]}";;
    esac
  fi

  if [ -n "${ac_opts}" ]; then
    for opt in $(echo ${ac_opts}); do
      case $opt in
        --update-config_sub)
          local fpath=$(find ${dir_src} -name 'config.sub')
          [ -f "${fpath}" ] && cp -f /usr/share/automake*/config.sub ${fpath}
          ;;
        --update-config_guess)
          local fpath=$(find ${dir_src} -name 'config.guess')
          [ -f "${fpath}" ] && cp -f /usr/share/automake*/config.guess ${fpath}
          ;;
        --no-sysroot)          ac_nosysroot=true;;
        --no-pic)              ac_nopic=true;;
        --no-host)             ac_nohost=true;;
      esac
    done
  fi

  if ! $ac_nohost && $host_cross && [ -n "$(cat ${dir_config}/${exec_config} | grep '\-\-host')" ]; then
    $host_cross && CFG+=" --host=${arch}"
  fi
  
  if ! $ac_nosysroot; then
    if [ -n "$(cat ${dir_config}/${exec_config} | grep '\-\-with-sysroot')" ]; then
      CFG+=" --with-sysroot=${SYSROOT}"
    elif [ -n "$(cat ${dir_config}/${exec_config} | grep '\-\-sysroot')" ]; then
      CFG+=" --sysroot=${SYSROOT}"
    fi
  fi

  if ! $ac_nopic && ! $host_mingw && [ -n "$(cat ${dir_config}/${exec_config} | grep '\-\-with-pic')" ]; then
    CFG+=" --with-pic"
  fi
}

version_parse(){
  local IFS='.|-|_'
  export arrv=()
  for f in $1; do
    if [ ${#arrv[@]} -lt 3 ]; then
      f=$(echo $f | grep -o '[0-9]*')
    fi
    if [ -n "$f" ]; then
      arrv+=($f)
    fi
  done
  echo "${arrv[@]:0:3}" | sed 's/ /./g'
}

git_version_local(){
  if [ -d "${1}/.git" ]; then
    version_parse "$(git --git-dir="${1}/.git" describe --match=?[0-9]* 2>/dev/null || git --git-dir=.git describe)"
  fi
  return 0
}

git_version_remote(){
  version_parse "$(git_vremote $1)"
}

git_vremote(){
  awk -v vv="$1" -f - << 'EOF'
BEGIN {
  FS = "[ /^]+"
  while ("git ls-remote " vv "| sort -Vk2" | getline) {
    if (!sha)
      sha = substr($0, 1, 7)
    tag = $3
  }
  while ("curl -s " vv "/releases/tag/" tag | getline)
    if ($3 ~ "commits")
      com = $2
  printf com ? "%s-%s-g%s\n" : "%s\n", tag, com, sha
}
EOF
}



# .language
# .homepage
# .size
# .licence.key
# .licence.name
# .licence.spdx_id