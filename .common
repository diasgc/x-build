#!/bin/bash
# ................................................
# Commons 0.3.2-dev 2021-diasgc
# Definition constants and functions
# ................................................

vsh='0.3.2-main'

#b="\u25ba"
b="\u2605"
c="\u2714"

# box chars
BX0="\u2502" BX1="\u251C" BX2="\u250C" BX3="\u2514" BX4="\u252C" BX5="\u2500"
BXH="${BX1}${BX5}${BX4}${BX5}${CY1}" BXL="${BX0} ${BX1}${BX5}${CY2}" BXE="${BX0} ${BX3}${BX5}${CY1}"

# def theme colors
C0="\e[0m" CW="\e[97m"  CD="\e[90m" CW2="\e[38;5;234m" CW3="\e[38;5;238m" CW4="\e[38;5;242m"  CW5="\e[38;5;246m" CW6="\e[38;5;250m"
CR0="\e[31m" CR1="\e[91m" CR2="\e[38;5;52m" CR3="\e[38;5;88m" CR4="\e[38;5;124m" CR5="\e[38;5;160m"  CR6="\e[38;5;196m"
CY0="\e[33m" CY1="\e[93m" CY2="\e[38;5;58m" CY3="\e[38;5;94m" CY4="\e[38;5;136m" CY5="\e[38;5;178m"  CY6="\e[38;5;220m"
CG0="\e[32m" CG1="\e[92m" CG2="\e[38;5;40m" CG3="\e[38;5;46m" CG4="\e[38;5;82m" CG5="\e[38;5;118m"  CG6="\e[38;5;154m"
CC0="\e[36m" CC1="\e[96m" CC2="\e[38;5;49m" CC3="\e[38;5;85m" CC4="\e[38;5;122m" CC5="\e[38;5;123m"  CC6="\e[38;5;195m"
CB0="\e[34m" CB1="\e[94m" CB2="\e[38;5;26m" CB3="\e[38;5;69m" CB4="\e[38;5;111m" CB5="\e[38;5;152m"  CB6="\e[38;5;153m"
CM0="\e[35m" CM1="\e[95m" CM2="\e[38;5;54m" CM3="\e[38;5;91m" CM4="\e[38;5;126m" CM5="\e[38;5;162m"  CM6="\e[38;5;198m"

CO0="\e[38;5;130m" CO1="\e[38;5;166m" CO2="\e[38;5;202m" CO3="\e[38;5;208m"  CO4="\e[38;5;214m" CO5="\e[38;5;220m" CO6="\e[38;5;223m"
CF0="\e[38;5;53m"  CF1="\e[38;5;89m"  CF2="\e[38;5;125m" CF3="\e[38;5;161m"  CF4="\e[38;5;197m" CF5="\e[38;5;211m" CF6="\e[38;5;219m"
CL0="\e[38;5;34m" CL1="\e[38;5;72m" CL2="\e[38;5;114m" CL3="\e[38;5;120m"  CL4="\e[38;5;156m" CL5="\e[38;5;192m" CL6="\e[38;5;230m"

# theme colors
CT0=$CM0 CT1=$CM1 CS0=$CR0 CS1=$CR1 SSB=$C0

: "${shell_dstack:=}"

function trap_sigint {
  tput cnorm
  cd $(dirname $0)
  local l
  [ -f "${log_file}" ] && l="  Log available at ${log_file}\n"
  echo -e "\n\n${CY1}  Interrupted by user${C0}\n${l}\n"
  trap - SIGINT
  exit 1
}

shopt -s extglob
trap trap_sigint SIGINT

# Logger
logtime_start=
export dir_root=$(pwd)
export PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;95m\]\u@\e[0;95m\h\[\033[00m\]:\[\033[01;96m\]\w\[\033[00m\]\$ '


splash(){
  cat << "EOF"

THE ▀▄ ▄▀   █▀▀▄ █  █ ▀█▀ █   █▀▀▄
     ▄▀▄ ▀▀ █▀▀▄ █  █  █  █   █  █ 
    ▀   ▀   ▀▀▀  ▀▀▀▀ ▀▀▀ ▀▀▀ ▀▀▀ 

   A cross-build script collection
    
EOF
}

function log {
	echo -ne "$CD$@$C0"
}

function logf {
	echo -e "\n$(date +"%T"): $@" >> "${log_file}"
}

function logok {
	echo -ne "\e[${#1}D${CT0}${1}${C0} "
}

# usage logver /path/to/pkgconfigfile.pc
function logver {
	if [ -f ${1} ]; then
		echo -ne "${CT1}version $(pkg-config --modversion ${1})${C0}"
	else
		echo -ne "${CS0} missing ${1} ${C0}"
	fi
}

function log_start {
	logtime_start=$(date +%s)
	if ! $inline; then
		echo -ne "${CD}${inde}${C0}$(date '+%H:%M')"
		[ $eta ] && echo -ne "-${CW}$(date '+%H:%M' --date="$eta seconds")"
		printf " ${CT1}%-10s ${CT1}%-21s${CD} " ${lib} ${arch}
	fi
	echo $(date) > ${log_file}
}

function log_end {
	if ! $inline && [ -n "${logtime_start}" ]; then
		logtime_end=$(date +%s)
		local secs=$((${logtime_end}-${logtime_start}))
		local msg="${CT1} done ${CD}in $(secs2time ${secs})"
		[ ${secs} -gt 60 ] && msg="${msg} (${secs}s)"
		echo -e "${msg}"
	fi
}

function log_this {
	echo -e "\n$(date +"%T"): $@" >> "${log_file}"
	"$@" 2>> "${log_file}" 1>> "${log_file}" || err
	logok
}


function log_vars {
	local t;
	while [ -n "$1" ]; do
		echo "$1=${!1}" >>"${log_file}" 2>&1
		shift
	done
	echo >>"${log_file}"
}

function print_vars {
	while [ -n "$1" ]; do
		printf "${CC0}%-20s: ${C0}%s\n" "  ${1}" ${!1}
		shift
	done
}

function exit_err {
	echo -e "${CR1}  Error: ${CR0}${1}${C0}\n\n"
	if [ -f ${log_file} ];then
		if [ -f ${dir_build}/CMakeFiles/CMakeError.log ];then
		echo -e "\n\n${dir_build}/CMakeFiles/CMakeError.log:\n" >> ${log_file}
		cat ${dir_build}/CMakeFiles/CMakeError.log >> ${log_file}
		fi
		echo -ne "${CD}${ind}${CY1}Open log? [Y|n]:${C0}" && read openlog
		[ "$openlog" != "n" ] && nano ${log_file}
	fi
	exit 1
}

err(){
	if [ -n "${logtime_start}" ]; then
		logtime_end=$(date +%s)
		echo -e "${CR1} fail ${CR0}[$(secs2time $((${logtime_end}-${logtime_start})))]${C0}\n"
	fi
	if [ -f "${log_file}" ];then
		if [ -f "${dir_build}/CMakeFiles/CMakeError.log" ];then
		  echo -e "\n\n${dir_build}/CMakeFiles/CMakeError.log:\n" >> "${log_file}"
		  cat "${dir_build}/CMakeFiles/CMakeError.log" >> "${log_file}"
		fi
		echo -ne "${CD}${ind}${CY1}Open log? [Y|n]:${C0}" && read openlog
		[ "${openlog}" != "n" ] && nano ${log_file}
	fi
	echo
	exit 1
}

function do_quietly {
	local var
  var="${1}"
  shift
	echo -ne "${CD}${var}${C0}"
	echo -e "\n$(date +"%T"): $@" >> "${log_file}"
	"$@" >/dev/null 2>&1
	logok "${var}"
}

function do_log {
	local var
  var="${1}"
  shift
	echo -ne "${CD}${var}${C0}"
	log_this $@
	logok "${var}"
}

function do_progress {
	local var
  var="${1}"
  shift
	echo -ne "${CD}${var}"
	echo -e "\n$(date +"%T"): $@" >> "${log_file}"
	("$@" |& tee -a ${log_file} | topct) || doErr "in ${var}:\n\n...\n$(tail -n5 ${log_file})${C0}"
	logok "${var}"
}

function topct {
	local sln
	local grp
	tput civis
	printf "build_system: %10s; make: %7s" ${build_system} ${MAKE_EXECUTABLE} >>${log_file}
	if [ "${build_system}" == "cmake" ] && [ "$(basename ${MAKE_EXECUTABLE})" == "make" ]; then
		printf "%-6s"
		while read -r ln; do
			str_contains "${ln}" 'error: ' && printf $CR1
			sln=$(grep -oP '\d+%' <<< $ln)
			[ -n "$sln" ] && printf "\e[5D%-5s" $sln
		done
		printf "\e[6D"
	elif [ "$(basename ${MAKE_EXECUTABLE})" == "ninja" ]; then
		printf "%-12s"
		while read -r ln; do
			str_contains $ln 'error: ' && printf $CR1
			sln=$(grep -oP '\[\d+/\d+\]' <<< $ln)
			[ -n "$sln" ] && printf "\e[11D%-11s" $sln
		done
		printf "\e[12D"
	else
		printf "%-6s"
		while read -r ln; do
			sln+="." # ·
			[ ${#sln} -eq 5 ] && sln=''
			[ -n "$sln" ] && printf "\e[5D%-5s" $sln
		done
		printf "\e[6D"
	fi
	tput cnorm
}


















color_table(){
  local i=16
  while [ $i -lt 52 ]; do
    j=$i
    k=0
    until [ $k == 7 ]; do
      printf "\e[38;5;%dm\u25cf %03d   " ${j} ${j}
      j=$(((j+36)%256))
      k=$((k+1))
    done
    i=$((i+1))
    printf '\r\n'
  done
}

color_vars(){
	local v
	local box=
	for c in R Y G C B M O F L; do
		for i in 0 1 2 3 4 5 6; do
			v="C${c}${i}"
			printf "${!v}\u2605${v}\u2605   "
		done
		printf "\n"
	done
	echo
}

hwinfoCountCoresReadable(){
  case $(nproc) in
    "1") echo "Single-Core";;
    "2") echo "Dual-Core";;
    "4") echo "Quad-Core";;
    "6") echo "Hexa-Core";;
    "8") echo "Octa-Core";;
    *) echo "$(nproc)-Core";;
  esac
}

hwinfoProcessor(){
  local i=$(cat /proc/cpuinfo | grep -Po '^.odel.*: \K(.*)' | tail -n1)
  [ -z "$i" ] && i=$(cat /proc/cpuinfo | grep -Po '^.ardware.*: \K(.*)' | tail -n1)
  [ -z "$i" ] && i=Unknown
  echo $i
}

banner(){
    echo -ne "\n\n  ${CW}${1} for X-Build ${vsh}${C0}\n  "
    echo -ne "Running on $(uname -m) $(uname -o) "
    [ -n $(command -v lsb_release) ] && echo -ne "$(lsb_release -sd) "
    if [ -n "$(uname -r | grep 'microsoft')" ];then
        echo -ne "${CD}WSL2 "
    elif [ -n "$(uname -r | grep 'Microsoft')" ];then
        echo -ne "${CD}WSL "
    else
        echo -ne "${CD} "
    fi
    echo -e "$(uname -r)${C0}"
    echo -e "${CW}  $(hwinfoCountCoresReadable) $(hwinfoProcessor)${C0}"
}

fn_defined(){
  [ "$(type -t $1)" = 'function' ]
}

fn_undef(){
  unset -f $1
}

fn_log(){
  if [ -z "$1" ]; then
    $2
  else
    do_log "$1" $2
  fi
  unset -f $2
}

isfn_defined(){
  [ "$(type -t $1)" = 'function' ]
}

git_getversion(){
  [ -d "${1}" ] && git --git-dir=${1}/.git --work-tree=${1} describe --abbrev=0 --tags || git describe --abbrev=0 --tags
}

array_join(){
  local IFS="${1}" && shift
  echo "$@"
}

#usage: str_concat 'sep' [arg_list]
str_concat(){
  local IFS="$1" && shift
  echo "$*"
}

# usage: str_contains str1 substr2
str_contains(){
   [ -z "${1##*${2}*}" ]
}

# usage: str_starts str1 substr2
str_starts(){
   [ "${1#${2}}" != "${1}" ]
}

str_ends(){
   [ "${1%${2}}" != "${1}" ]
}

str_lowercase(){
  echo ${1} | tr '[:upper:]' '[:lower:]'
}

str_uppercase(){
  echo ${1} | tr '[:lower:]' '[:upper:]'
}

defvar(){
  local k
  while [ -n "${1}" ]; do
    k=${1%=*}
    [ -z ${k+x} ] && eval $k=${1#*=}
  done
}

pushv(){
  while [ -n "${1}" ]; do
    shell_vstack+=("$1")
    shift
  done
  return 0
}

popv(){
  if [ -z "${1}" ]; then
    local n=${#shell_vstack[@]}
    if [ $n -gt 0 ]; then
      echo ${shell_vstack[n-1]}
      unset shell_vstack[-1]
    fi
  else while [ -n "${1}" ]; do
    eval "$1"="'$(popv)'"
    shift
    done
  fi
  return 0
}

clearv(){
  unset shell_vstack
}

pushdir(){
  case $SHELL in
    *bash) pushd $1 >/dev/null 2>&1;;
    *) pushvar_f shell_dstack $1; cd $1;;
  esac
}

popdir(){
  case $SHELL in
    *bash) popd >/dev/null 2>&1;;
    *) local d=$(popvar_f shell_dstack); [ -n "$d" ] && cd $d;;
  esac
}

# usage: set_bool <condition> <value_true> <value_false>
set_bool(){
  $1 && echo $2 || echo $3
}

prt_progress_old(){
  printf "%-6s"
  while read -r ln; do
    printf "\e[6D%-6s" $(grep -oP '\d+%' <<< $ln)
  done
  printf "\e[6D"
}

prt_progress(){
  printf "%-6s"
  local sln
  while read -r ln; do
    str_contains $ln 'error: ' && printf $CR1
    sln=$(grep -oP '\d+%' <<< $ln)
    [ -n "$sln" ] && printf "\e[5D%-5s" $sln
  done
  printf "\e[6D"
}

inc_tab(){
  export indent=$((indent+2))
  export inds="${ind}┬─"
  export inde="${ind}└─"
  export ind+="│ "
  #echo "inctab: $indent $ind............"
}

dec_tab(){
  export indent=$((indent-2))
  [ ${#ind} -gt 1 ] && export ind="${ind::-2}"
  #echo "dectab: $indent $ind............"
}


# exclusive variable add substrings left var_xaddl <var> <substrings...>
# appends substrings to the left/start of var iff main doesnt contains substring
var_xaddl(){
  local v=$1; shift
    while [ -n "$1" ];do
        [ -z "${!v##*${1}*}" ] || eval $v=\"${1} ${!v}\"
        shift
    done
}

# exclusive variable add substrings right var_xaddl <var> <substrings...>
# appends substrings to the right/end of var variable iff main doesnt contains substring
var_xaddr(){
    local v=$1; shift
    while [ -n "$1" ];do
        [ -z "${!v##*${1}*}" ] || eval $v=\"${!v} ${1} \"
        shift
    done
}

var_addr(){
    local v=$1; shift; eval $v=\"${!v} $@\"
}

var_addl(){
    local v=$1; shift; eval $v=\"$@ ${!v}\"
}

# vercomp v1 v2 returns 0: v1=v2, 1: v1>v2, 2: v1<v2
vercomp () {
    test "$1" = "$2" && return 0
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++)); do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++)); do
        test -z "${ver2[i]}" && ver2[i]=0
        if ((10#${ver1[i]} > 10#${ver2[i]})); then return 1; fi
        if ((10#${ver1[i]} < 10#${ver2[i]})); then return 2; fi
    done
    return 0
}

rm_quiet(){
  rm -rf $@ 2>&1 >/dev/null
}

rm_log(){
  local log=$1; shift
  [ -f "${log}" ] && [ -n "$@" ] && rm -rf $@ 2>&1 >>${log}
}

log_progress(){
  printf "%-6s"
  local sln
  IFS=$'\n'
  while read -r ln; do
    # $has_logfile && \
    printf "%-6s: %s\n" $(time_elapsed) $ln >>${logfile}
    str_contains $ln 'error: ' && printf $CR1
    sln=$(grep -oP '\d+%' <<< $ln)
    [ -n "$sln" ] && printf "\e[5D%-5s" $sln
  done
  printf "\e[6D"
  unset IFS
}

# usage: log <logfile> [--noerr|--progress] <label> <commands....>
log(){
  local noerr=false
  local progress=false
  while $(str_starts $1 '--');do
    case $1 in
      --noerr) noerr=true;;
      --progress) progress=true;;
    esac
    shift
  done
	local label=$1; shift
	echo -ne "${CD}${label}${C0}"
	echo -e "\n$(time_elapsed): $@" >> "$logfile"
  if $progress; then
	  ("$@" |& log_progress) || err "in ${act}:\n\n...\n$(tail -n5 ${logfile}${C0})"
  else
	  "$@" 2>> "$logfile" 1>> "$logfile" || err
  fi
	echo -ne "\e[${#label}D${CT0}${label}${C0} "
}

log_init(){
  export logfile=${1}
  [ -f "${1}" ] && rm -f $logfile
  export log_timestart=$(date +%s)
}

logsc(){
  echo -ne "  ${CC0} $1"
  shift
  "$@"
  echo -e " ${CC1}done${C0}"
}

logv(){
  while [ -n "${1}" ]; do
    echo "$1=${!1}" >>${logfile} 2>&1
    shift
  done
  echo >>${logfile}
}

log_end(){
  log_timestop=$(date +%s)
  local secs=$(($log_timestop-$log_timestart))
  local msg="${CT1} done ${CD}in $(secs2time ${secs})"
  [ $secs -gt 60 ] && msg="$msg (${secs}s)"
  #echo -e "$msg pkg/lib: ${pkgsize}/${libsize}kb${C0}"
  echo -e "$msg"
}

err(){
  if [ $# -gt 0 ];then
    echo -e "${CR1}  Error: ${CR0}${1}${C0}\n\n"
    if [ -f "${logfile}" ];then
      # todo
      #if [ -f ${BUILD_DIR}/CMakeFiles/CMakeError.log ];then
      #  echo -e "\n\n${BUILD_DIR}/CMakeFiles/CMakeError.log:\n" >> $logfile
      #  cat ${BUILD_DIR}/CMakeFiles/CMakeError.log >> $logfile
      #fi
      echo -ne "${CY1}${ind}Open log? [Y|n]:${C0}" && read openlog
      case $openlog in y*|Y*) nano ${logfile};; esac
    fi
  fi
  exit 1
}

time_elapsed(){
  if [ -n "${log_timestart}" ] && [ ${log_timestart} -gt 0 ];then
    local dt=$(($(date +%s) - ${log_timestart}))
    printf "+%-10s" $(date -u -d @${dt} +"%m:%S")
  else
    printf " --:-- "
  fi
}

url_dom(){
  echo "$1" | awk -F/ '{print $3}'
}

git_vendor(){
  echo "$1" | awk -F/ '{print $4}'
}

# usage: git_get_version srcdir
git_local_version(){
  local out;
  if [ -d "${1}/.git" ];then
    local d=$(pwd)
    cd ${1}
    out=$(git describe --abbrev=0 --tags 2>/dev/null)
    cd ${d}
  fi
  echo $out
}

git_remote_version(){
  echo $(git ls-remote --tags --refs --sort="v:refname" ${1} 2>/dev/null | head -n1 | sed 's/.*\///')
}

git_api_tojson(){
  local s=$(echo "$1" | sed 's/https:\/\///g; s/\// /g; s/\.git$//')
  set -- $s
  case ${1} in
    github*) echo -e "$(curl https://api.github.com/repos/${2}/${3} 2>/dev/null)";;
    gitlab*) echo -e "$(curl -XGET -H "Content-Type: application/json" "https://${1}/api/v4/projects/${2}%2F${3}" 2>/dev/null)";;
    *) echo;;
  esac
}

get_latest_release() {
  local s=$(echo "$1" | sed 's/https:\/\///g; s/\// /g; s/\.git$//')
  set -- $s
  #echo -ne "$1: $2/$3"
  case $1 in
    github*) echo -e "$(curl --silent "https://api.github.com/repos/${2}/${3}/releases/latest" | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')";;
  esac                                # Pluck JSON value
}

wget_untar(){
  local args
  case $1 in
    *.tar.lz) 
      [ -z $(command -v lzip) ] || exit 1
      args="--lzip -xv"
      ;;
    *.tar.gz|*.tgz) args="-xvz";;
    *.tar.xz) args="-xvJ";;
  esac
  [ -d "tmp" ] && rm -rf tmp
  mkdir tmp
  wget -qO- $1 2>/dev/null | tar --transform 's/^dbt2-0.37.50.3/dbt2/' $args -C tmp >/dev/null 2>&1 || exit 1
  cd tmp
  mv * $2 && mv $2 ..
  cd ..
  rm -rf tmp
}

gitlab_licence(){
  local s=$(echo "$1" | sed 's/https:\/\///g; s/\// /g; s/\.git$//')
  set -- $s
  if [ "$1" == "github.com" ];then
    echo -e "$(curl https://api.github.com/repos/${2}/${3} 2>/dev/null)"
  elif [ "${1}" != "${1#gitlab}" ];then
    local json=$(curl -XGET -H "Content-Type: application/json" "https://${1}/api/v4/projects/${2}%2F${3}" 2>/dev/null)
    local id=$(echo "$json" | jq .id)
    echo ${id} "curl --request GET https://${1}/api/v4/licence/${id}"
  else
    echo
  fi
}

github_json_desc(){
  echo "${1}" | jq .description | sed 's/"//g'
}

github_jq(){
  echo "${1}" | jq "${2}" | sed 's/"//g'
}

#usage: arch_fromid out_arm64 out_arm out_x86 out_x64
arch_fromid(){
  local xid=$(expr "$cpu_id" % 4)
  local args=("$@")
  echo "${args[${xid}]}"
}

#usage: arch_fromid out_android out_linux out_windows
os_fromid(){
  local xid=$(expr "$cpu_id" / 4 % 3)
  local args=("$@")
  echo "${args[${xid}]}"
}

load_hostfeats(){
  case $host_cpuid in
    0) arch="${arch_list[0]}"; host_arm=true; host_arm64=true; LIBSDIR+="${ldir_list[0]}";;
    1) arch="${arch_list[1]}"; host_arm=true; host_arm32=true; LIBSDIR+="${ldir_list[1]}";;
    2) arch="${arch_list[2]}"; host_x86=true; LIBSDIR+="${ldir_list[2]}";;
    3) arch="${arch_list[3]}"; host_x64=true; host_cross=false; LIBSDIR+="${ldir_list[3]}";;
  esac
}

format_pathlist(){
  local sep=$2
  local prf=$3
  local out=
  for a in $1; do
    out+="${prf}${a}${sep}"
  done
  echo "${out}"
}

# usage: patch_fromremote <base_url> patch1,...,...
patch_fromremote(){
  local baseUrl=$1; shift
  while [ -n "$1" ]; do
    wget -qO- ${baseUrl}/$1 | patch
    shift
  done
}

# usage: wget_source <src-url> <dst-dir>
wget_source(){
    local fn=$(basename $1) || doErr "Invalid source url '$1'"
    [ -z "$2" ] && local dn=$(pwd) || local dn=$2
    case $fn in
      *.zip);;
      *.tar.lz|*.tlz) args="--lzip -xv";;
      *.tar.gz|*.tgz) args="-xvz";;
      *.tar.xz|*.txz) args="-xvJ";;
    esac
}

# usage: wget_pkg_termux <lib-name> <aarch64|arm|i686|x86_64> <dst-dir>
wget_pkg_termux(){
  [ -z "$1" ] || [ -z "$2" ] || [ ! -d "$3" ] && return 1
  echo -ne "searching for ${1}"
  local rname=$(wget -qO- http://termux.net/dists/stable/main/binary-${2}/ | grep -o ${1}_.*\.${2}\.deb\" | tail -n1)
  [ -z "${rname}" ] && echo -e " ${CR0}not found: aborting" && return 1
  rname=${rname:0:-1}
  echo -ne "${CY0}:found $rname"
  local od=$(pwd); cd ${3}
  [ -d "tmp" ] && rm -rf tmp
  mkdir -p tmp && cd tmp
  local url="http://termux.net/dists/stable/main/binary-${2}/${rname}"
  echo -ne " >download"
  wget -q $url
  [ ! -f "$rname" ] && echo -e "${CR1}:fail to download $url\n${C0}" && return 1
  echo -ne " >extract"
  ar -x $rname && tar -x -f data.tar.xz
  echo -ne " >fix paths"
  sed -i "s;/data/data/com.termux/files/usr;${3};g" data/data/com.termux/files/usr/lib/pkgconfig/*.pc 2>/dev/null
  cp -rf data/data/com.termux/files/usr/* ..
  cd .. && rm -rf tmp
  echo -e "${CG1} :done${C0}"
  cd $od
  return 0
}

#usage wget_pkg_debian [--list] <pkg-name> <filename-prefix> <arm64|armhf|armel|i386|amd64> dst-dir
wget_pkg_debian(){
  local lst=false
  local p_arch
  [ "$1" == "--list" ] && lst=true && shift
  case $3 in
    aarch64*) p_arch="arm64";;
    arm*hf)   p_arch="armhf";;
    arm*eabi) p_arch="armel";;
    i686*)    p_arch="i386";;
    x86_64*)  p_arch="amd64";;
    *) echo -e "${CR0} unknown $3${C0}"; return 1;;
  esac
  [ "${1::3}" == "lib" ] && local ldir=${1::4} || local ldir=${1::1}
  local url="http://ftp.debian.org/debian/pool/main/${ldir}/${1}/"
  echo $url
  if $lst; then
    local uris=$(curl -l ${url} 2>/dev/null | grep -o \>${2}_.*_${p_arch}.deb)
    for u in $uris; do
      echo ${url}${u:1}
    done
  else
    local od=$(pwd)
    if [ ! -d "$4" ];then
      mkdir -p $4 || return 1
    fi
    cd $4
    [ -d "tmp" ] && rm -rf tmp
    mkdir -p tmp && cd tmp
    local u=$(curl -l $url 2>/dev/null | grep -o \>${2}_.*_${p_arch}.deb | tail -n1)
    url="${url}${u:1}"
    echo $url
    wget -q $url
    ar -x $(basename ${url}) && tar -x -f data.tar.xz
    mv usr/lib/${3}/* usr/lib && rm -rf usr/lib/${3}
    sed -i "s|lib/${3}|lib|g;s|/usr|${4}|g" usr/lib/pkgconfig/*.pc 2>/dev/null
    cp -rf usr/* ..
    cd .. && rm -rf tmp
    echo -e "${CG1} :done${C0}"
    cd $od
  fi
}

libname_2_packagename(){
  if [ -n $(command -v apt) ]; then
    pkglist=$(apt-cache search --names-only ${lib})
  fi
}

list_pkgs(){
  local pd="${dir_root}/builds"
  case $1 in
    *-android*) wget -q "https://sourceforge.net/projects/packages-${1}/rss?path=/" -O - | grep -Po '<title><!\[CDATA\[.*</title>' | grep -Po '/.*tar.gz' | sed 's|/||'> ${pd}/$1_pkglist.txt;;
    *) return 1;;
  esac
}

get_link_pkg(){
  local pd="${dir_root}/builds"
  #[ -f "${pd}/${arch}_pkglist.txt" ] || list_pkgs ${arch}
  #local fn=$(cat "${pd}/${arch}_pkglist.txt" | grep "${lib}.*${arch}.tar.gz" | tail -n1)
  [ -z "${fn}" ] && [ -n "${dev_vrs}" ] && fn="${lib}_${dev_vrs}_${arch}.tar.gz"
  [ -n "${fn}" ] && echo "https://sourceforge.net/projects/packages-${arch}/files/${fn}"
  return 0
}

version_parse(){
  local IFS='.|-|_'
  export arrv=()
  for f in $1; do
    if [ ${#arrv[@]} -lt 3 ]; then
      f=$(echo $f | grep -o '[0-9]*')
    fi
    if [ -n "$f" ]; then
      arrv+=($f)
    fi
  done
  echo "${arrv[@]:0:3}" | sed 's/ /./g'
}

git_version_local(){
  if [ -d "${1}/.git" ]; then
    version_parse "$(git --git-dir="${1}/.git" describe --match=?[0-9]* 2>/dev/null || git --git-dir="${1}.git" describe 2>/dev/null)"
  fi
  return 0
}

git_version_remote(){
  version_parse "$(git_vremote $1)"
}

vrs_exclude='alpha|beta'
git_vremote(){
  local lgit=$(git ls-remote $src)
  local v=$(echo "${lgit}" | grep -oP '\d+\.\d+\.\d+.*' | grep -vP $vrs_exclude | tail -n1)
  [ -z "${v}" ] && v=$(echo "${lgit}" | grep -oP '\d+\.\d+.*' | grep -vP $vrs_exclude | tail -n1)
  if [ -n "${v}" ]; then
    echo "${v}"
  fi
  return 0
  awk -v vv="${lgit}" ss="${src}" -f - << 'EOF'
BEGIN {
  FS = "[ /^]+"
  while ("echo " vv "| sort -Vk2" | getline) {
    if (!sha)
      sha = substr($0, 1, 7)
    tag = $3
  }
  while ("curl -s " ss "/releases/tag/" tag | getline)
    if ($3 ~ "commits")
      com = $2
  printf com ? "%s-%s-g%s\n" : "%s\n", tag, com, sha
}
EOF
}

get_patch(){
  local match=$(grep -oP "(?<=^<<').*?(?=')" $1)
  local out
  if [ -n "${match}" ]; then
    out=${match}
    local block=$(awk '/^<<.'"$match"'./{flag=1; next} /^'"$match"'/{flag=0} flag' $1)
    out+="\n${block}"
  fi
  echo ${out}
}

test_c0(){
  #set -x
  local wdir="${dir_src}/${1}"
  if [ -d "${wdir}" ]; then
    local od="$(pwd)"
    cd $wdir
    echo -e "${2}" > testfile.c
    [ -n "$(command -v clang)" ] && cc=clang || cc=gcc
    $cc -c testfile.c && $cc -o testfile testfile.o && rm *.o
    ./testfile
    cd $od
  fi
  #set +x
  return 0
}

c_printf(){
  #set -x
  local wdir="${dir_src}/${1}"
  if [ -d "${wdir}" ]; then
    local od="$(pwd)"
    cd $wdir
    local hfile=$2
    local printf_expr=$3
    local cc
    if [ ! -f "testfile" ]; then
      cat <<-testfile >>testfile.c
				#include <stdio.h>
				#include "${hfile}"
				int main(){
				  printf(${printf_expr});
				}
				testfile
      [ -n "$(command -v clang)" ] && cc=clang || cc=gcc
      $cc -c testfile.c && $cc -o testfile testfile.o && rm *.o
    fi
    ./testfile
    cd $od
  fi
  #set +x
  return 0
}

# .language
# .homepage
# .size
# .licence.key
# .licence.name
# .licence.spdx_id