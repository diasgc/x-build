#!/bin/bash

# check_opt $1
function check_opt(){
	if [ -f "${dir_root}/${1}.sh" ]; then
		script_list+=( "${1}" )
	elif fn_defined 'extraOpts'; then
		extraOpts $1
	fi
}

aa64='@(aa64|aa8|a*64-*android|android*-a*64|arm*8*android|android*arm*8)'
aa32='@(aa32|aa7|arm-*android*|arm*7*-android*|android*arm*7*)'
ax86='@(a86|ax86|*86-*android|android*86)'
ax64='@(a64|ax64|*64-*android|android*64)'
la64='@(la8|la64|a*64-linux|arm*8*-linux|a*64-linux|a*64-*gnu|arm*8*-*gnu)'
la32='@(la7|lahf|arm*hf|arm-linux*)'
lx86='@(l86|lx86|*86-linux*|linux*32)'
lx64='@(l64|lx64|*64-linux*|linux*64|linux)'
wa64='@(wa8|a*64-w64*|a*64-*mingw*)'
wa32='@(wa7|arm*-w64*|arm*-*mingw*)'
wx86='@(w86|wx86|*86-win*|*86-*mingw*|w*32)'
wx64='@(w64|wx64|*64-win*|*64-*mingw*|windows|win|w*64)'

optVrs='@(--version|--vrs|--ver|-v)'
optDnl='@(--download|--dl|-d)'
optHelp='@(--help|-h)'


while [ $1 ];do
	case $1 in
		
		$optHelp)	showBanner; usage; exit 0;;

		native)		set_target_build; host_native=true;;

		$aa64 )		set_target '0' 'aarch64' '' 'linux' 'android' '' 'arm64-v8a' '64' $CG3 $CG6;;
		$aa32 )		set_target '1' 'arm' 'v7a' 'linux' 'android' 'eabi' 'armeabi-v7a' '32' $CG2 $CG5;;
		$ax86 )		set_target '2' 'i686' '' 'linux' 'android' '' 'x86' '32' $CG0 $CG1;;
		$ax64 )		set_target '3' 'x86_64' '' 'linux' 'android' '' 'x86_64' '64' $CG0 $CG1;;

		$la64 )		set_target '4' 'aarch64' '' 'linux' 'gnu' '' 'aarch64' '64' $CM4 $CM6;;
		$la32 )		set_target '5' 'arm' '' 'linux' 'gnu' 'eabihf' 'armv7' '32' $CM4 $CM6;;
		$lx86 )		set_target '6' 'i686' '' 'linux' 'gnu' '' 'x86' '32' $CM0 $CM1;;
		$lx64 )		set_target '7' 'x86_64' '' 'linux' 'gnu' '' 'x86_64' '64' $CM0 $CM1;;

		$wa64 )		set_target '8' 'aarch64' '' 'w64' 'mingw32' '' 'arm64' '64' $CC0 $CC1;;
		$wa32 )		set_target '9' 'arm' 'v7' 'w64' 'mingw32' '' 'armv7' '32' $CC0 $CC1;;
		$wx86 )		set_target '10' 'i686' '' 'w64' 'mingw32' '' 'x86' '32' $CB0 $CB1;;
		$wx64 )		set_target '11' 'x86_64' '' 'w64' 'mingw32' '' 'x86_64' '64' $CB0 $CB1;;

		--full)    	build_shared=true
					build_static=true
					build_bin=true
					build_dist=true
					dep_build="--full"
					;;
		$optVrs)	shift; vrs=$1;;
		--bra*)     shift; export bra=$1;;
		--shared)   build_shared=true; build_static=false;;
		--static)   build_static=true; build_shared=false;;
		--both)     build_static=true; build_shared=true;;
		--bin)      build_bin=true;;
		--no-bin)   build_bin=false;;
		--man)      build_man=true;;
		--dist)     build_dist=true;;
		--cpack)    build_cpack=true;;
		--strip)    build_strip=true;;
		--api)      shift; export API=$1;;
		--clang)    use_clang=true;;
		--gcc)      use_clang=false;;
		--tune)     shift; menu_tune $1;;
		--cpus)     loadToolchain; $CC --print-supported-cpus; exit 0;;
		--mcpu)		shift; export CPPFLAGS+=" -mcpu=${1}";;
		--mtune)	shift; export CPPFLAGS+=" -mtune=${1}";;

		$optDnl)	build_pkgdl=true;;

		--prefix)   shift; dir_install=$1;;
		--stable)   git_stable=true;;
		--diff)     shift; create_diff $@; exit 0;;
		--update)   update=true;;
		--upd-all)  update=true; req_update_deps=true;;
		--opts)     showOpts "$(pwd)/sources/$lib"; exit 0;;
		--checkPkg) checkPkg; exit 0;;
		--libName)  echo "${lib}"; exit 0;;
		--var)      shift; echo "$($1)"; exit 0;;
		--refresh)  update=true;;
		--retry)    retry=true;;
		--force)    [ -f "${dir_install_pc}/${pkg}.pc" ] && rm "${dir_install_pc}/${pkg}.pc" 2>/dev/null;;
		
		--clear)    shift; menu_clear $@; exit 0;;
		--desc )    echo $dsc && exit 0;;
		
		--get)      shift; menu_get $@; exit 0;;
		--check)    shift; check_install $@; exit 0;;

		--list)     shift; menu_list $@; exit 0;;

		--patch)    shift;
					case $1 in
						a|add|append)       shift; patch_append $@; exit 0;;
						m|make|e|embed)     shift; patch_embed $1; exit 0;;
						g|get|show)         patch_get; exit 0;;
					esac
					;;

		--skip)     shift; skip_options $@;;

		--goto)     shift; menu_goto $@; exit 0;;

		--git)      shift; menu_git $@; exit 0;;

		--dirbuild) shift; dir_build=$1;;
		--inline)   inline=true;;
		--clone)    only_repo=true;;   
		--cmake)    cfg='cmake';;
		--ndkcmake) ndkcmake=true;;
		--ccmake)   cfg='ccm';;
		--nobanner) banner=false;;
		--nodev)    nodev=true;;
		
		* ) check_opt $1;;

	esac
	shift
done

for s in ${script_list[@]}; do
	source "${s}.sh"
done

