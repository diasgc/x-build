--- CMakeLists.txt	2022-02-01 12:59:13.060057200 +0000
+++ CMakeLists.txt	2022-02-01 13:03:13.390057200 +0000
@@ -14,28 +14,8 @@
 # Options
 #
 
-# ZOPFLI_BUILD_SHARED controls if Zopfli libraries are built as shared or
-# static
-#
-# It defaults to the value of BUILD_SHARED_LIBS if set, and in most cases
-# that should be used instead. The purpose of ZOPFLI_BUILD_SHARED is to allow
-# overriding it when built as a subproject.
-set(zopfli_shared_default OFF)
-if(DEFINED BUILD_SHARED_LIBS)
-  set(zopfli_shared_default ${BUILD_SHARED_LIBS})
-endif()
-option(ZOPFLI_BUILD_SHARED "Build Zopfli with shared libraries" ${zopfli_shared_default})
-unset(zopfli_shared_default)
-
 # ZOPFLI_BUILD_INSTALL controls if Zopfli adds an install target to the build
-#
-# When built standalone or as a shared library subproject, the default is ON,
-# and for static library subproject the default is OFF.
-if(zopfli_standalone OR ZOPFLI_BUILD_SHARED)
-  option(ZOPFLI_BUILD_INSTALL "Add Zopfli install target" ON)
-else()
-  option(ZOPFLI_BUILD_INSTALL "Add Zopfli install target" OFF)
-endif()
+option(ZOPFLI_BUILD_INSTALL "Add Zopfli install target" ON)
 
 # ZOPFLI_DEFAULT_RELEASE enables changing empty build type to Release
 #
@@ -60,18 +40,9 @@
 set(ZOPFLI_VERSION_PATCH 3)
 set(ZOPFLI_VERSION ${ZOPFLI_VERSION_MAJOR}.${ZOPFLI_VERSION_MINOR}.${ZOPFLI_VERSION_PATCH})
 
-if(ZOPFLI_BUILD_SHARED)
-  set(zopfli_library_type SHARED)
-else()
-  set(zopfli_library_type STATIC)
-endif()
-
 include(GNUInstallDirs)
 
-#
-# libzopfli
-#
-add_library(libzopfli ${zopfli_library_type}
+set(libzopfli_src
   src/zopfli/blocksplitter.c
   src/zopfli/cache.c
   src/zopfli/deflate.c
@@ -85,43 +56,69 @@
   src/zopfli/zlib_container.c
   src/zopfli/zopfli_lib.c
 )
-target_include_directories(libzopfli
-  INTERFACE
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/zopfli>
-    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
-)
-set_target_properties(libzopfli PROPERTIES
-  OUTPUT_NAME zopfli
-  VERSION ${ZOPFLI_VERSION}
-  SOVERSION ${ZOPFLI_VERSION_MAJOR}
-)
-if(UNIX AND NOT (BEOS OR HAIKU))
-  target_link_libraries(libzopfli m)
-endif()
 
-#
-# libzopflipng
-#
-add_library(libzopflipng ${zopfli_library_type}
+set(libzopflipng_src
   src/zopflipng/zopflipng_lib.cc
   src/zopflipng/lodepng/lodepng.cpp
   src/zopflipng/lodepng/lodepng_util.cpp
 )
-target_link_libraries(libzopflipng libzopfli)
-target_include_directories(libzopflipng
-  INTERFACE
-    $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/zopflipng>
-    $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
-)
-set_target_properties(libzopflipng PROPERTIES
-  OUTPUT_NAME zopflipng
-  VERSION ${ZOPFLI_VERSION}
-  SOVERSION ${ZOPFLI_VERSION_MAJOR}
-)
+
+set(libzopfli_targets libzopfli)
+set(libzopflipng_targets libzopflipng)
+if(BUILD_SHARED_LIBS AND BUILD_STATIC_LIBS)
+    list(APPEND libzopfli_targets libzopfli-static)
+    list(APPEND libzopflipng_targets libzopflipng-static)
+endif()
+
+foreach(lib ${libzopfli_targets})
+    if(${lib} MATCHES "-static$")
+        set(btype STATIC)
+        set(stype "-static")
+    else()
+        set(btype "")
+        set(stype "")
+    endif()
+    add_library(${lib} ${btype} ${libzopfli_src})
+    target_include_directories(${lib}
+        INTERFACE
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/zopfli>
+        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+    )
+    set_target_properties(${lib} PROPERTIES
+        OUTPUT_NAME zopfli
+        VERSION ${ZOPFLI_VERSION}
+        SOVERSION ${ZOPFLI_VERSION_MAJOR}
+    )
+    if(UNIX AND NOT (BEOS OR HAIKU))
+        target_link_libraries(${lib} m)
+    endif()
+endforeach()
+
+foreach(lib ${libzopflipng_targets})
+    if(${lib} MATCHES "-static$")
+        set(btype STATIC)
+        set(stype "-static")
+    else()
+        set(btype "")
+        set(stype "")
+    endif()
+    add_library(${lib} ${btype} ${libzopflipng_src})
+    target_link_libraries(${lib} libzopfli${stype})
+    target_include_directories(${lib}
+        INTERFACE
+        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/src/zopflipng>
+        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
+    )
+    set_target_properties(${lib} PROPERTIES
+        OUTPUT_NAME zopflipng
+        VERSION ${ZOPFLI_VERSION}
+        SOVERSION ${ZOPFLI_VERSION_MAJOR}
+        )
+endforeach()
 
 # MSVC does not export symbols by default when building a DLL, this is a
 # workaround for recent versions of CMake
-if(MSVC AND ZOPFLI_BUILD_SHARED)
+if(MSVC AND BUILD_SHARED_LIBS)
   if(CMAKE_VERSION VERSION_LESS 3.4)
     message(WARNING "Automatic export of all symbols to DLL not supported until CMake 3.4")
   else()
@@ -164,7 +161,7 @@
 #
 if(ZOPFLI_BUILD_INSTALL)
   # Install binaries, libraries, and headers
-  install(TARGETS libzopfli libzopflipng zopfli zopflipng
+  install(TARGETS ${libzopfli_targets} ${libzopflipng_targets} zopfli zopflipng
     EXPORT ZopfliTargets
     RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
     LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
@@ -194,4 +191,4 @@
       DESTINATION ${CMAKE_INSTALL_LIBDIR}/cmake/Zopfli
     )
   endif()
-endif()
+endif()
\ No newline at end of file
